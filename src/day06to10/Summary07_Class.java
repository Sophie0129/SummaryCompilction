package day06to10;
/*
 
 클래스의 변수는 객체라고 부름..(자료형이 대문자로 시작하는것)
	절차지향이 처리속도가 객체지향보다 빠르지만 사용하기가 객체지향보다 까다롭다
	컴퓨터도 객체 내 폰도 객체 차도 , 나도 객체, 틀로 만들어진것은 객체
	절차지향은 틀이 없고 기능별로 나뉘어 있다. 위치를 꼭 알아야 사용가능
	객체는 틀에 갇혀있어 그중 하나만뺄수가 없다. 그중 하나를 쓰고 싶어도 틀 전체를 가져가야함 무겁다
	절차는 기능 하나만 빼가 가능 가볍다. 반면에 찾기가 힘들다 분산되어 있어서 우리가 직접적으로 기억해야함
 
 
 
 
객체 = 변수 
메소드 = .add .remove 같은 기능들, 전반적인 동작들을 이야기함 

클래스안에 있는 기능은 메소드method, 클래스 밖에 있는 기능은 펑션function 이라고 부른다
 
 
다른 폴더 클래스 가져오기

module-info 파일은 프로젝트를 가져올때, 또는 내보낼때 쓰는 파일

A폴더의 a파일에서 객체 만들기
A폴더의 모듈인포 파일에 들어가 exports a파일명


원하는 파일 우클릭 맨아래 속성으로 가서 자바빌드>프로젝트를 선택하고, 
모듈패스를 클릭해 add 원하는 폴더 선택하고 apply
내보낼땐 해당 위치의 모듈파일에서 export로 파일들을 일일이 선택.
가져올땐 가져올 위치의 모듈파일에서 폴더명을 requires


a파일을 가져올 위치인 B파일의 모듈인포 들어가기
requires A폴더명

이후 B폴더에서 b파일을 만들어
a파일명 변수 = new a파일명();
하면 해당 변수에 a파일에서 만든 내용이 포함되어 있다.

변수.a파일에서 만든 객체 (자동완성도 가능) 으로 해당 객체를 불러올 수도 있다

--------
이후 B폴더에서 여러파일들을 만들어 Main과 Test로 나누어 식을 한쪽에 몰고
그 식에 할당하는 변수를 만들어 Main에서는 변수 하나만으로 값을 도출할 수 있는걸 배움

보통 Test에서 Private이 아닌 Public으로 객체들을 만들고,
Test 변수 = new Test();
으로 그 객체들을 불러와
변수.Test 객체로 값을 주고 프린트도 변수.Test객체 로 했다.

그동안 main으로 자동완성했던 부분도 배웠는데
Test파일에서 main 부분을 직접 쓴다.

public void 변수명(자료형 매개변수명) {}

여기서 void는 값을 넘겨줄 수 있는 return 함수를 쓰지 못하고,
return을 쓰고 싶다면 void부분을 return 값에 맞는 자료형으로 바꿔줘야한다.
정수면 int, 문자열이면 String 등등...
매개변수 또한 Main에서 값을 받는 변수인데 그 값에 맞는 자료형으로 받아줘야한다.

//자료형도 맞춰야 하고, 반환형도 맞춰주어야한다.
//배열이나 리스트로 묶어 하나의 덩어리로 만들면 값이 많아도 반환 가능
//매개변수도 똑같은 자료형으로 받아줘야 함, 들어오는 값이 다 다르니 여러개의 매개변수 필요
//리턴값으로 돌아가는 값과 같은 자료형으로 맞춰주기

매개변수는 여러개의 자료형, 여러개의 변수로 한번에 만들 수도 있다.
ex) public void 변수명(int n, String s, HashMap<int, int> m)


//중복코드 없애는데 메소드 쓰면 좋음

//디버깅 모드시 F6과 F5는 둘다 한줄씩 실행이지만
//F5는 메소드 지역으로 찾아가서 실행한다

//메소드를 만들때 강한결합과 약한 결합이 있는데 후자가 더 좋다

//같은 클래스 안에서는(같은 지역)서로 메소드를 불러올수 있다
//그런 경우 강한 결합이라고 한다 그리고 기능들이 한 덩어리로 묶여 좋지않은 코딩
//그래서 값 입력 따로 연산 따로 결과도출 따로 메소드를 만들어 
//메인과 테스트에서 주고 받았던것, 그러면 기능이 다 따로 있다.


//.이후 객체를 가져올때 노란 페이지에 배열로써 반환될것이라는걸 알려준다.
//그래서 받은 값을 배열로써 받을 수 있게 코딩 
 
//브레이크는 반복문을 빠져나오는 것
//리턴은 값을 되돌려주면서 바로 식이 종료됨

//값이 필요없을때 소문자 자료형은 보통 값을 0으로 도출함
//반환타입에 맞춰 값이 없을때에 나올 값을 무조건 설정해주어야함
//변수 초기화가 필요한 이유와 같다
//위 식은 else를 넣어서 써도 됨
 
 //return 100; << 위의 자료형이 문자열이므로 알맞지 않은 식 에러남
 
//return "ㅁㅁㅁㅁ", "ㅇㅇㅇㅇ", "ㅊㅊㅊㅊ" << 안됨
//리턴으로 되돌릴수 있는 값은 1개만 가능
 

//최종적인 프린트는 Main에 위치하는게 좋다.
 /*어차피 모든 계산의 답을 컴퓨터는 알고 있어서 프린트가 이유가 없지만
  사용자는 눈으로 보아야 하기 때문에 프린트가 필요하다.
  프린트란 결국 사용자가 필요한 작업이니까 기능쪽엔 기능만
//기능을 담당하는 클래스에는 기능만 있는게 좋다.
*/




 